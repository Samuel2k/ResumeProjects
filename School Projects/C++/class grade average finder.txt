#include <string>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <vector>
using namespace std;

/*Input should name of existing file formatted like so:
Firstname Lastname ## ## ##
Anothername anothername ## ## ##

writes to new file named report.txt
*/

int main() {
   /* TODO: Declare any necessary variables here. */
   //instantiate variables
   string fileName;
   fstream gradeFile;
   
   vector<string> names;
   vector<int> midterm1grades;
   vector<int> midterm2grades;
   vector<int> finalGrades;
   double midterm1avg = 0.0;
   double midterm2avg = 0.0;
   double finalAvg = 0.0;
      
   /* TODO: Read a file name from the user and read the tsv file here. */
   cin >> fileName;
   gradeFile.open(fileName, ios::in);
   while (!gradeFile.eof()) {
      //instantiate temp variables
      string currentLine = "";
      string currentName = "";
      int currentInt = 0;
      
      //get the name
      gradeFile >> currentLine;
      currentName = currentLine;
      gradeFile >> currentLine;
      currentName += "\t" + currentLine;
      names.push_back(currentName);
      
      //get the midterm1 grade
      gradeFile >> currentInt;
      midterm1grades.push_back(currentInt);
      
      //get the midterm2 grade
      gradeFile >> currentInt;
      midterm2grades.push_back(currentInt);
      
      //get the finals test grade
      gradeFile >> currentInt;
      finalGrades.push_back(currentInt);
   }
   gradeFile.close();
   
   //deletes extraeneous line generated by loop (annoying solution but it works)
   names.pop_back();
   midterm1grades.pop_back();
   midterm2grades.pop_back();
   finalGrades.pop_back();
   
   /* TODO: Compute student grades and exam averages, then output results to a text file here. */
   ofstream outGradeFile("report.txt");
   for (int i = 0; i < names.size(); ++i) {
      //instantiate temp variables
      char letterGrade = 'N';
      double avgGrade = (midterm1grades[i] + midterm2grades[i] + finalGrades[i]) / 3;
      
      //determine the letter grade
      if (90 <= avgGrade) {
         letterGrade = 'A';
      }
      else if (80 <= avgGrade && avgGrade < 90) {
         letterGrade = 'B';
      }
      else if (70 <= avgGrade && avgGrade < 80) {
         letterGrade = 'C';
      }
      else if (60 <= avgGrade && avgGrade < 70) {
         letterGrade = 'D';
      }
      else if (avgGrade < 60) {
         letterGrade = 'F';
      }
      
      //output person's name & grades
      outGradeFile << names[i] << "\t";
      outGradeFile << midterm1grades[i] << "\t";
      outGradeFile << midterm2grades[i] << "\t";
      outGradeFile << finalGrades[i] << "\t";
      outGradeFile << letterGrade << endl;
      
      //Add up all of the student's various grades into class test averages with each loop
      midterm1avg += midterm1grades[i];
      midterm2avg += midterm2grades[i];
      finalAvg += finalGrades[i];
   }
   //After having added up all of the scores together, divide into average
   midterm1avg /= midterm1grades.size();
   midterm2avg /= midterm2grades.size();
   finalAvg /= finalGrades.size();
   
   //output averages of entire class
   outGradeFile << endl << "Averages: midterm1 " << fixed << setprecision(2) << midterm1avg;
   outGradeFile << ", midterm2 " << fixed << setprecision(2) << midterm2avg;
   outGradeFile << ", final " << fixed << setprecision(2) << finalAvg << endl;
   outGradeFile.close();

   return 0;
}
